<h1>Help Page - Pattern Scripts plugin for JMRI</h1>
<h2>Introduction</h2>
<p>This program is a plugin for JMRI Operations Pro. With it, the user can generate pattern reports for tracks at a single location. Additionally, cars can be moved from track to track within a location, and optionally, if a car is moved onto a spur, the schedule for that spur can be applied. Support for my TrainPlayer suite of scripts is also included. The use of this plugin is documented in the following list of videos.</p>
<h2>Video Documentation</h2>
<p>These videos are recorded in the english language.</p>
>How to add this plugin to JMRI</p>
>How to set up this plugin</A></p>
>Demonstration at a yard</A></p>
>Demonstration at industry</A></p>
>How to modify this plugin</p>
>Use this plugin with TrainPlayer</p>
<h2>Organization</h2>
<p>The following chart shows the code structure of this plugin.</P>
<h2>Plugin Layout</h2>
<h2>Pattern Scripts Subroutine</h2>
<h2>Pattern Report for Track Window</h2>
<h2>Track Pattern and Switch List JSON format</h2>
<p>The pattern reports and TrainPlayer exports all start with the creation of a JSON file. The file is created by this plugin and in the case of TrainPlayer manifest exports the JSON is created by modifying the JMRI generated manifest JSON. All the JSON files are written to the jsonManifests folder. They follow the illustrated format:</p>
<h2>Key
<p>Each JMRI profile gets its own configuration file, which is named PatternConfig.json. It is found in the operations folder, and is used to provide custom settings for each profile and record user inputs.
>The description of each element is in blue</font>
>User editable keys are described in green</font>
<br>Guard rails of sorts have been put up around the values marked in green, but even so this plugin is not able to catch every type of mistake. In some cases the plugin might crash. If that happens, press the 'Restart from PatternConfig Backup" button and the plugin will use the last good PatternConfig.json file as a new starting off point. In other cases, if a mistake is made editing the PatternConfig.json file, the plugin will replace it with the default file, and the user will have to start over.
<br>Worst case, simply delete the Pattern Config.json file and the plugin will create a new one.</p>
<h3><font color="green">Color Definitions</font></h3>
>Color Palett</font>
>Any of these colors can be changed</font>
>Alpha value</font>
>Blue value</font>
>Vague Description</font>
>Green value</font>
>Red value</font>
>No color can be specified with ""</font>
>Control Panel</font></h3>
>Do not edit these</font>
>Add button to Panel Pro frame, plugin is not displayed but still enabled</font>
>May be expanded in v3</font>
>Script Includes</font>
>Include this subroutine in the Control Panel</font>
>Available in v3</font>
>Default panel height</font>
>Default panel width</font>
>Not Implemented</font>
>Not Implemented</font>
>Revision control</font>
>Pattern Tracks</font></h3>
>Do not edit these</font>
>All Locations (written by this plugin)</font>
>Pattern Location (written by this plugin)</font>
>Pattern-Tracks (written by this plugin)</font>
>Yard Tracks Only flag (set by user)</font>
>Ignore Track Length flag (set by user)</font>
>Apply Schedule flag (set by user)</font>
>TrainPlayer Include flag (set by user)</font>
>Pattern Width</font>
>Pattern Height</font>
>Row Multiplier</font>
<font color="green">Report Modifiers</font></h3>
>Destination designator</font>
>Destination Track designator</font>
>Final Destination designator</font>
>Final destination Track designator</font>
>Sort Locomotives</font>
>Sort Cars</font>
>Attribute Width</font>
