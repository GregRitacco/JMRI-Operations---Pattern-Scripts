
Todo:
  Map TP OC Class/XO reserved to something in JMRI/o2o import.
  o2o new and update not bullet proof
  New and Update o2o buttons should refresh the PS Subroutine GUI
  
  csv file not writting properly, Set_To not written
  ModelWorkEvents.*.parsePsWorkEventRs and ModelWorkEvents.*.parseRS do the same things in a different way, can they be merged?
  Tighten up the except part of all try/except
  How to publish DeepL
  Location manager has the combo box stuff

Comments:
  Schedule does not prevent setting a car to a track

Tested Items:
  Plugin
    Replaced PatternScriptEntities with PSE everywhere.
    Handle multiple versions OK.
    Handles font size change OK.
    Works if two instances of PanelPro are open
    Test for file write locations OK.
    All Set Cars windows close when Pattern Scripts window is closed OK.
    PatternConfig.json version check OK.
    Moved ENCODING value into the config file
    Move config file master copy into psEntities to shield it from accidental edit
    Bad edits of config file protected as much as possible. CBB
    Pattern Scripts plugin hardened against errors  more or less. CBB
    Plugin restarts OK.
    On defective config file, plugin replaces the defective file with the master copy OK.
    Plugin switches language OK.
    All SI items set to false works OK.
    SI set to TP only works OK.
    Handles JMRI load type Empty or empty OK.
    PatternScriptEntities.getShortLoadType works and translates OK.

  Reports
    Test with really long location and spur names OK.
    Try os.path.join() to make all paths for better OS compatibility.
    Display load type as L E or O in reports OK.
    Kernel Size is displaying in reports OK.
    [Hold] changed to ['Current Track Name'] for reports
    Ignore Track Length works with yard tracks OK.
    formatText formats ascii OK.
    formatText() works with utf-8 OK.
    Create JSON header OK.
    Create JSON body OK.
    Append JSON switchlist OK.
    Write JMRI location list to trainPlayer OK.
    Write JMRI workEvent list to TrainPlayer OK.
    Report Title - Pattern Report edits OK.
    Report Title - Set Cars edits OK.
    Report Title - TrainPlayer edits OK.
    CSV pattern and list written OK.
    Locos in report follow jmri.jmrit.operations.setup.Setup.getDropEngineMessageFormat OK.
    Cars in report follow jmri.jmrit.operations.setup.Setup.getLocalCarMessageFormat OK.
    Reports ignore Tab,Tab2, Tab3 OK.

  Actions
    _trackNameClickedOn moved to PatternScriptEntities.TRACK_NAME_CLICKED_ON
    Caboose and passenger move OK.
    Caboose and Passenger car types are loaded as O for Occupied OK.
    When setting to a spur the reserved column for the spur shows an entry, as it should when setting a destination
    RWE and RWL seems to work OK.
    Default load/empty toggling OK.
    Car move count advances when set into spur only OK.
    Schedule hit count advances OK.
    Set to spur ignores the cars load, but schedule sets it OK.
    Ignore Track Length works with schedules
    Set cars to spur removes FD OK.
    Toggle AS Apply schedule in config file works OK.

  Language
    Language changes OK.
    Language bundle sketched in, to be hardened against web errors.
    Bundle added with French test case.
    BUNDLE calls placed in 'View' methods only as much as possible.
    Bundle creates new plugin and help page translations OK.
    DYI version of concurrency seems to work OK.

  o2o
    importTpRailroad rolled into New JMRI Railroad and Update Rolling Stock.
    Add a listener to monitor if a new train is created or deleted, builtTrain listeners updated accordingly.
    New JMRI Railroad saveing the new xml OK.
    TP import creates the track length OK.
    Adding script to run on train built for TP export is not needed, but still can be done.
    TrainPlayer subroutine sketched in, to be expanded.
    TrainPlayer integration harden with train built listeners.
    TP Exports unicode OK.
    TrainPlayer support implements OK.
    ExportToTrainPlayer.py works as module OK.
    ExportToTrainPlayer.py works as script OK.
    When run as a stand alone script, ManifestForTrainPlayer does not read config file, which is correct.

Catches Items:
  Catches pattern report button press no tracks selected OK.
  Catches set cars button press no tracks selected OK.
  Catches user edit of location at location combo box OK.
  Catches and ignores user edit of log display
  Catches on the fly user edit of track names for pattern report OK.
  Catches on the fly user edit of track names for set cars OK.
  Catches empty boxes added to jmri.jmrit.operations.setup.Setup.getLocalSwitchListMessageFormat() OK.
  Catches invalid track typed into set cars box OK.
  Catches on the fly edit of RS name or road
  Catches on the fly user corruption of config file more or less. Soft landing. CBB
  KeyError when editing config file crashed plugin, bummer. Restart button bale out.
  Catches user add/remove train while TP export is enabled.
  Catches user edit train while TP export is enabled.

Version 3 ideas:
  Harden up Bundle against web errors, untranslated items.
  How to use locale modifier, IE en-GB.
  Should import button be part of new and update?
  Implement TrainPlayer Support subroutine.
  Implement mergeConfigFiles()
  Enhance and harden BUNDLE.
  Start working on distributed JMRI
    Set Cars windows add work to work list or docket, similar to TrainPlayer button, add Yardmaster button to Set Cars windows. Work can then be reported as it's done.
    jmri.jmrit.operations.locations.YardmasterFrame(location)
    Phone based switch list crew can report work when done. Crews use train symbol as ID
    Maybe a custom Trains window with only the trains for each yard master location + pattern scripts

Wish List:
  add Pattern Scripts to Operations Pro combo box?
  plugin added to button in trains window (AWT.getComponents())?
  jmri.util.swing.JMenuUtil.replaceMenuItem() to replace the trains window with a new trains window that includes a ps button?

Colors:
  # DUST = java.awt.Color(245,242,233) # Light tan
  # PALE = java.awt.Color(237,243,250) # Light blue
  # LICHEN = java.awt.Color(244,255,236) # Light green
  # FADED = java.awt.Color(237,225,245) # Light purple
  # BLANCH = java.awt.Color(235,225,212) # Light orange

Bundle Constants Used
  ROAD = Bundle.getMessage("Road"); // the supported message format options
  NUMBER = Bundle.getMessage("Number");
  TYPE = Bundle.getMessage("Type");
  MODEL = Bundle.getMessage("Model");
  LENGTH = Bundle.getMessage("Length");
  WEIGHT = Bundle.getMessage("Weight");
  LOAD = Bundle.getMessage("Load");
  LOAD_TYPE = Bundle.getMessage("Load_Type");
  COLOR = Bundle.getMessage("Color");
  TRACK = Bundle.getMessage("Track");
  DESTINATION = Bundle.getMessage("Destination");
  DEST_TRACK = Bundle.getMessage("Dest&Track");
  FINAL_DEST = Bundle.getMessage("Final_Dest");
  FINAL_DEST_TRACK = Bundle.getMessage("FD&Track");
  LOCATION = Bundle.getMessage("Location");
  CONSIST = Bundle.getMessage("Consist");
  KERNEL = Bundle.getMessage("Kernel");
  KERNEL_SIZE = Bundle.getMessage("Kernel_Size");
  OWNER = Bundle.getMessage("Owner");
  RWE = Bundle.getMessage("RWE");
  COMMENT = Bundle.getMessage("Comment");
  DROP_COMMENT = Bundle.getMessage("SetOut_Msg");
  PICKUP_COMMENT = Bundle.getMessage("PickUp_Msg");
  HAZARDOUS = Bundle.getMessage("Hazardous");
  BLANK = " "; // blank has be a character or a space
  BOX = " [ ] "; // NOI18N

  The tabs are ignored by this plugin
  TAB = Bundle.getMessage("Tab"); // used to tab out in tabular mode
  TAB2 = Bundle.getMessage("Tab2");
  TAB3 = Bundle.getMessage("Tab3");
