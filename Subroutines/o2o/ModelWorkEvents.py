# coding=utf-8
# Â© 2023 Greg Ritacco

"""
Creates the TrainPlayer JMRI Report - o2o Workevents.csv file from either PatternTracksSubroutine or BuiltTrainExport
"""

from opsEntities import PSE
from Subroutines.o2o import ModelEntities

SCRIPT_NAME = PSE.SCRIPT_DIR + '.' + __name__
SCRIPT_REV = 20230201


_psLog = PSE.LOGGING.getLogger('OPS.o2o.ModelWorkEvents')


class opsSwitchListConversion:
    """
    Converts a switch list generated by the Patterns subroutine into an TrainPlayer/Quick Keys compatable work events list.
    """

    def __init__(self):

        self.inputName = PSE.getBundleItem('ops-switch-list')
        self.inputFileName = self.inputName + '.json'
        self.inputTargetPath = PSE.OS_PATH.join(PSE.PROFILE_PATH, 'operations', 'jsonManifests', self.inputFileName)

        self.opsSwitchList = {}
        self.cars = []
        self.locos = []

        self.tpWorkEventsList = {}

        self.validationResult = True

        return
    
    def validate(self):

        if not PSE.JAVA_IO.File(self.inputTargetPath).isFile():
            print('ALERT: not found-ops-switch-list.json')
            self.validationResult = False

        return self.validationResult


    def convert(self):
        """
        Mini controller.
        """

        self.switchListGetter()
        self.makeTpWorkEventsList()
        self.addTracksToList()

        return self.tpWorkEventsList
    
    def switchListGetter(self):

        opsSwitchList = PSE.genericReadReport(self.inputTargetPath)
        self.opsSwitchList = PSE.loadJson(opsSwitchList)

        return
    
    def makeTpWorkEventsList(self):

        self.tpWorkEventsList['railroadName'] = self.opsSwitchList['railroadName']
        self.tpWorkEventsList['railroadDescription'] = self.opsSwitchList['railroadDescription']
        self.tpWorkEventsList['trainName'] = self.opsSwitchList['trainName']
        self.tpWorkEventsList['trainDescription'] = self.opsSwitchList['trainDescription']
        self.tpWorkEventsList['date'] = self.opsSwitchList['date']
        self.tpWorkEventsList['locations'] = [{'locationName':self.opsSwitchList['location'],'tracks':[]}]

        return

    def addTracksToList(self):

        tracks = []

        for track in self.opsSwitchList['tracks']:
            trackItems = {}
            self.cars = []
            self.locos = []
            for car in track['cars']:
                parsed = self.parsePtRs(car)
                parsed['puso'] = 'SC'
                self.cars.append(parsed)
            for loco in track['locos']:
                parsed = self.parsePtRs(loco)
                parsed['puso'] = 'SL'
                self.locos.append(parsed)
            trackItems['cars'] = self.cars
            trackItems['locos'] = self.locos
            tracks.append(trackItems)

        self.tpWorkEventsList['locations'][0].update({'tracks':tracks})

        return

    def parsePtRs(self, rs):
        """
        The load field is either Load(car) or Model(loco).
        Pattern scripts have only one location.
        Location and Destination are the same.
        """

        parsedRS = {}
        parsedRS['road'] = rs['road']
        parsedRS['number'] = rs['number']
        parsedRS['carType'] = rs['carType']
        parsedRS['destination'] = rs['location']
        parsedRS['location'] = rs['location']
        parsedRS['track'] = rs['track']
        try:
            parsedRS['loadType'] = PSE.getShortLoadType(rs)
            parsedRS['load'] = rs['load']
        except:
            parsedRS['load'] = rs['model']

        if self.parseSetTo(rs['setTo']) == PSE.getBundleItem('Hold'):
            parsedSetTo = rs['track']
        else:
            parsedSetTo = self.parseSetTo(rs['setTo'])
        parsedRS['setTo'] = parsedSetTo

        return parsedRS

    def parseSetTo(self, setTo):
        """
        format: [Freight House]   
        """

        return setTo[1:-1].split(']')[0]


class jmriManifestConversion:
    """
    Converts the JMRI generated manifest for use by o2oWorkEvents.
    """

    def __init__(self, builtTrain):

        self.builtTrain = builtTrain
        self.jmriManifest = {}
        self.o2oWorkEvents = {}

        self.cars = []
        self.locos = []

        return

    def convert(self):
        """
        Mini controller.
        """

        self.jmriManifestGetter()
        self.convertHeader()
        self.convertBody()

        return self.o2oWorkEvents
    
    def jmriManifestGetter(self):

        _psLog.debug('jmriManifestConversion.jmriManifestGetter')

        reportName = self.builtTrain.getName()
        fileName = 'train-' + reportName + '.json'
        targetPath = PSE.OS_PATH.join(PSE.PROFILE_PATH, 'operations', 'jsonManifests', fileName)

        workEventList = PSE.genericReadReport(targetPath)
        self.jmriManifest = PSE.loadJson(workEventList)

        return

    def convertHeader(self):
        """
        Train comment is not in the JMRI train.json file.
        """

        _psLog.debug('jmriManifestConversion.convertHeader')

        self.o2oWorkEvents['railroadName'] = PSE.HTML_PARSER().unescape(self.jmriManifest['railroad'])
        self.o2oWorkEvents['railroadDescription'] = PSE.JMRI.jmrit.operations.setup.Setup.getComment()
        self.o2oWorkEvents['trainName'] = PSE.HTML_PARSER().unescape(self.jmriManifest['userName'])
        self.o2oWorkEvents['trainDescription'] = PSE.HTML_PARSER().unescape(self.jmriManifest['description'])

        epoch = PSE.convertJmriDateToEpoch(self.jmriManifest['date'])
        self.o2oWorkEvents['date'] = PSE.validTime(epoch)
        self.o2oWorkEvents['locations'] = []

        return

    def convertBody(self):

        _psLog.debug('jmriManifestConversion.convertBody')

        for location in self.jmriManifest['locations']:

            cars = []
            for car in location['cars']['add']:
                parsedRS = self.parseRS(car)
                parsedRS['puso'] = u'PC'
                cars.append(parsedRS)
            for car in location['cars']['remove']:
                parsedRS = self.parseRS(car)
                parsedRS['puso'] = u'SC'
                cars.append(parsedRS)

            locos = []
            for loco in location['engines']['add']:
                parsedRS = self.parseRS(loco)
                parsedRS['puso'] = u'PL'
                locos.append(parsedRS)
            for loco in location['engines']['remove']:
                parsedRS = self.parseRS(loco)
                parsedRS['puso'] = u'SL'
                locos.append(parsedRS)

            self.o2oWorkEvents['locations'].append({'locationName': location['userName'], 'tracks': [{'cars': cars, 'locos': locos}]})

        return

    def parseRS(self, rs):
        """
        The load field ie either Load or Model.
        """

        parsedRS = {}
        parsedRS['road'] = rs['road']
        parsedRS['number'] = rs['number']
        parsedRS['carType'] = rs['carType']
        parsedRS['location'] = rs['location']['userName']
        parsedRS['track'] = rs['location']['track']['userName']
        parsedRS['destination'] = rs['destination']['userName']
        parsedRS['setTo'] = rs['destination']['track']['userName']
        try:
            parsedRS['loadType'] = PSE.getShortLoadType(rs)
            parsedRS['load'] = rs['load']
        except:
            parsedRS['load'] = rs['model']

        return parsedRS

    def geto2oWorkEvents(self):

        return self.o2oWorkEvents


class o2oWorkEvents:
    """
    This class makes the o2o work event list for TrainPlayer.
    """

    def __init__(self, workEvents):

        self.tpRollingStockData = ModelEntities.getTpRailroadJson('tpRollingStockData')

        self.workEvents = workEvents
        self.o2oList = ''

        fileName = 'JMRI Report - o2o Workevents.csv'
        self.o2oWorkEventPath = PSE.OS_PATH.join(PSE.JMRI.util.FileUtil.getHomePath(), 'AppData', 'Roaming', 'TrainPlayer', 'Reports', fileName)

        return

    def makeList(self):
        """
        Mini controller.
        """
        
        self.o2oHeader()
        self.o2oLocations()
        self.saveList()

        return
    
    def o2oHeader(self):

        _psLog.debug('o2oWorkEvents.o2oHeader')

        self.o2oList = 'HN,' + PSE.getRailroadName().replace('\n', ';') + '\n'
        self.o2oList += 'HT,' + self.workEvents['trainName'] + '\n'
        self.o2oList += 'HD,' + self.workEvents['trainDescription'] + '\n'
        self.o2oList += 'HV,' + self.workEvents['date'] + '\n'
        self.o2oList += 'WT,' + str(len(self.workEvents['locations'])) + '\n'

        return

    def o2oLocations(self):
        """
        This works for both JMRI and o2o generated lists.
        """

        _psLog.debug('o2oWorkEvents.o2oLocations')

        counter = 1

        for location in self.workEvents['locations']:
            self.o2oList += u'WE,' + str(counter) + ',' + location['locationName'] + '\n'
            for track in location['tracks']:
                for car in track['cars']:
                    self.o2oList += self.makeLine(car) + '\n'
                for loco in track['locos']:
                    self.o2oList += self.makeLine(loco) + '\n'

            counter += 1

        return

    def makeLine(self, rs):
        """
        This makes a rolling stock line for the TP o2o file.
        format: PUSO, TP ID, Road, Number, Car Type, L/E/O, Load or Model, From, To
        """

        ID = rs['road'] + ' ' + rs['number']
        load = ''
        try:
            load = rs['load']
        except:
            load = rs['model']

        try: # Locos don't use load type
            lt = rs['loadType']
        except:
            lt = u'X'

        pu = rs['location'] + ';' + rs['track']

        so = rs['destination'] + ';' + rs['setTo']

        return rs['puso'] + ',' + ID + ',' + rs['road'] + ',' + rs['number'] + ',' + rs['carType'] + ',' + lt + ',' + load + ',' + pu + ',' + so

    def saveList(self):

        _psLog.debug('o2oWorkEvents.saveList')

        if ModelEntities.tpDirectoryExists():
            PSE.genericWriteReport(self.o2oWorkEventPath, self.o2oList)

        print(SCRIPT_NAME + '.o2oWorkEvents ' + str(SCRIPT_REV))

        return



# def parseRS(rs):
#     """
#     Generic rolling stock parser.
#     Works with JMRI manifest output and Patterns switch list output.
#     The load field is either Load(car) or Model(loco).
#     """

#     parsedRS = {}
#     parsedRS['road'] = rs['road']
#     parsedRS['number'] = rs['number']
#     parsedRS['carType'] = rs['carType']

#     try:
#         parsedRS['loadType'] = PSE.getShortLoadType(rs)
#         parsedRS['load'] = rs['load']
#     except:
#         parsedRS['load'] = rs['model']

#     try:
#         parsedRS['location'] = rs['location']['userName']
#     except:
#         parsedRS['location'] = rs['location']

#     try:
#         parsedRS['track'] = rs['location']['track']['userName']
#     except:
#         parsedRS['track'] = rs['track']

#     try:
#         parsedRS['destination'] = rs['destination']['userName']
#     except:
#         parsedRS['destination'] = rs['location']

#     try:
#         parsedRS['setTo'] = rs['destination']['track']['userName']
#         return parsedRS
#     except:
#         pass

#     parsedSetTo = rs['setTo'][1:-1].split(']')[0] # IE parse [Freight House] to Freight House
#     if  parsedSetTo == PSE.getBundleItem('Hold'):
#         parsedSetTo = rs['track']

#     parsedRS['setTo'] = parsedSetTo

#     return parsedRS
