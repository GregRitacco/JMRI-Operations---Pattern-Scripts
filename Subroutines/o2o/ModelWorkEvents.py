# coding=utf-8
# Â© 2023 Greg Ritacco

"""
Creates the TrainPlayer JMRI Report - o2o Workevents.csv file from either PatternTracksSubroutine or BuiltTrainExport
"""

from opsEntities import PSE
from Subroutines.o2o import ModelEntities

SCRIPT_NAME = PSE.SCRIPT_DIR + '.' + __name__
SCRIPT_REV = 20230201


_psLog = PSE.LOGGING.getLogger('OPS.o2o.ModelWorkEvents')

def o2oWorkListMaker():
    """
    Mini controller to convert the Patterns ops-work-list.json into an o2o work events file.
    """

    o2oWorkList = opsWorkListConversion().convert()

    o2o = o2oWorkEvents(o2oWorkList)
    o2o.o2oHeader()
    o2o.o2oLocations()
    o2o.saveList()

    print(SCRIPT_NAME + '.o2oWorkListMaker ' + str(SCRIPT_REV))

    return

def parseRS(rs):
    """
    Generic rolling stock parser.
    Works with JMRI manifest output and Patterns switch list output.
    The load field is either Load(car) or Model(loco).
    """

    parsedRS = {}
    parsedRS['road'] = rs['road']
    parsedRS['number'] = rs['number']
    parsedRS['carType'] = rs['carType']

    try:
        parsedRS['loadType'] = PSE.getShortLoadType(rs)
        parsedRS['load'] = rs['load']
    except:
        parsedRS['load'] = rs['model']

    try:
        parsedRS['location'] = rs['location']['userName']
    except:
        parsedRS['location'] = rs['location']

    try:
        parsedRS['track'] = rs['location']['track']['userName']
    except:
        parsedRS['track'] = rs['track']

    try:
        parsedRS['destination'] = rs['destination']['userName']
    except:
        parsedRS['destination'] = rs['location']

    try:
        parsedRS['setTo'] = rs['destination']['track']['userName']
        return parsedRS
    except:
        pass

    parsedSetTo = rs['setTo'][1:-1].split(']')[0] # IE parse [Freight House] to Freight House
    if  parsedSetTo == PSE.getBundleItem('Hold'):
        parsedSetTo = rs['track']

    parsedRS['setTo'] = parsedSetTo

    return parsedRS


class opsWorkListConversion:
    """
    Converts a worklist generated by the Patterns subroutine into an o2o compatable work list.
    """

    def __init__(self):

        self.opsWorkList = {}
        self.o2oWorkList = {}
        self.cars = []
        self.locos = []

        return

    def workListGetter(self):

        reportName = PSE.getBundleItem('ops-work-list')        
        fileName = reportName + '.json'
        targetPath = PSE.OS_PATH.join(PSE.PROFILE_PATH, 'operations', 'jsonManifests', fileName)

        opsWorkList = PSE.genericReadReport(targetPath)
        self.opsWorkList = PSE.loadJson(opsWorkList)

        return

    def rsGetter(self):

        for track in self.opsWorkList['tracks']:
            for car in track['cars']:
                # parsed = self.parsePtRs(car)
                parsed = parseRS(car)
                parsed['puso'] = 'SC'
                self.cars.append(parsed)
            for loco in track['locos']:
                # parsed = self.parsePtRs(loco)
                parsed = parseRS(loco)
                parsed['puso'] = 'SL'
                self.locos.append(parsed)

        return

    def parsePtRs(self, rs):
        """
        The load field is either Load(car) or Model(loco).
        Pattern scripts have only one location.
        Location and Destination are the same.
        """

        parsedRS = {}
        parsedRS['road'] = rs['road']
        parsedRS['number'] = rs['number']
        parsedRS['carType'] = rs['carType']
        try:
            parsedRS['loadType'] = PSE.getShortLoadType(rs)
            parsedRS['load'] = rs['load']
        except:
            # print('Exception at: o2o.ModelWorkEvents.parsePtRs')
            parsedRS['load'] = rs['model']

        parsedRS['location'] = rs['location']
        parsedRS['track'] = rs['track']
        parsedRS['destination'] = rs['location']

        if self.parseSetTo(rs['setTo']) == PSE.getBundleItem('Hold'):
            parsedSetTo = rs['track']
        else:
            parsedSetTo = self.parseSetTo(rs['setTo'])
        parsedRS['setTo'] = parsedSetTo

        return parsedRS

    def parseSetTo(self, setTo):
        """
        format: [Freight House]   
        """

        return setTo[1:-1].split(']')[0]

    def o2oWorkListUpdater(self):


        self.o2oWorkList['railroadName'] = PSE.getRailroadName()
        self.o2oWorkList['railroadDescription'] = self.opsWorkList['railroadDescription']
        self.o2oWorkList['trainName'] = self.opsWorkList['trainName']
        self.o2oWorkList['trainDescription'] = self.opsWorkList['trainDescription']
        self.o2oWorkList['date'] = self.opsWorkList['date']
        self.o2oWorkList['location'] = self.opsWorkList['location']
        self.o2oWorkList['tracks'] = self.opsWorkList['tracks']



        # self.o2oWorkList['locations'] = [{'locationName':location,'tracks':[{'trackName':'', 'length':'', 'cars':[], 'locos':[]}]}]
        # self.o2oWorkList['locations'][0]['tracks'][0]['cars'] = self.cars
        # self.o2oWorkList['locations'][0]['tracks'][0]['locos'] = self.locos

        return

    def convert(self):
        """
        Mini controller to convert the work list.
        """

        self.workListGetter()
        self.rsGetter()
        self.o2oWorkListUpdater()

        return self.o2oWorkList


class jmriManifestConversion:
    """
    Converts the JMRI generated manifest for use by o2oWorkEvents.
    """

    def __init__(self, builtTrain):

        self.configFile = PSE.readConfigFile()

        self.builtTrain = builtTrain
        self.jmriManifest = {}
        self.o2oWorkEvents = {}

        return

    def jmriManifestGetter(self):

        _psLog.debug('jmriManifestConversion.jmriManifestGetter')

        reportName = self.builtTrain.getName()
        fileName = 'train-' + reportName + '.json'
        targetPath = PSE.OS_PATH.join(PSE.PROFILE_PATH, 'operations', 'jsonManifests', fileName)

        workEventList = PSE.genericReadReport(targetPath)
        self.jmriManifest = PSE.loadJson(workEventList)

        return

    def convertHeader(self):
        """
        Train comment is not in the JMRI train.json file.
        """

        _psLog.debug('jmriManifestConversion.convertHeader')

        OSU = PSE.JMRI.jmrit.operations.setup
        extendedHeader = unicode(OSU.Setup.getRailroadName(), PSE.ENCODING)
        self.o2oWorkEvents['railroadName'] = extendedHeader

        self.o2oWorkEvents['railroadDescription'] = PSE.JMRI.jmrit.operations.setup.Setup.getComment()
        self.o2oWorkEvents['trainName'] = PSE.HTML_PARSER().unescape(self.jmriManifest['userName'])
        self.o2oWorkEvents['trainDescription'] = PSE.HTML_PARSER().unescape(self.jmriManifest['description'])

        epoch = PSE.convertJmriDateToEpoch(self.jmriManifest['date'])
        self.o2oWorkEvents['date'] = PSE.validTime(epoch)
        self.o2oWorkEvents['locations'] = []

        return

    def convertBody(self):

        _psLog.debug('jmriManifestConversion.convertBody')

        for location in self.jmriManifest['locations']:

            cars = []
            for car in location['cars']['add']:
                # parsedRS = self.parseRS(car)
                parsedRS = parseRS(car)
                parsedRS['puso'] = u'PC'
                cars.append(parsedRS)
            for car in location['cars']['remove']:
                parsedRS = self.parseRS(car)
                parsedRS['puso'] = u'SC'
                cars.append(parsedRS)

            locos = []
            for loco in location['engines']['add']:
                # parsedRS = self.parseRS(loco)
                parsedRS = parseRS(loco)
                parsedRS['puso'] = u'PL'
                locos.append(parsedRS)
            for loco in location['engines']['remove']:
                parsedRS = self.parseRS(loco)
                parsedRS['puso'] = u'SL'
                locos.append(parsedRS)

            self.o2oWorkEvents['locations'].append({'locationName': location['userName'], 'tracks': [{'trackName': 'xyz', 'cars': cars, 'locos': locos}]})

        return

    # def parseRS(self, rs):
    #     """
    #     The load field ie either Load or Model.
    #     How to combine this with parsePtRs?
    #     They do the sae thing.
    #     """

    #     parsedRS = {}
    #     parsedRS['road'] = rs['road']
    #     parsedRS['number'] = rs['number']
    #     parsedRS['carType'] = rs['carType']
    #     try:
    #         parsedRS['loadType'] = PSE.getShortLoadType(rs)
    #         parsedRS['load'] = rs['load']
    #     except:
    #         # print('Exception at: o2o.ModelWorkEvents.parseRS')
    #         parsedRS['load'] = rs['model']

    #     parsedRS['location'] = rs['location']['userName']
    #     parsedRS['track'] = rs['location']['track']['userName']
    #     parsedRS['destination'] = rs['destination']['userName']
    #     parsedRS['setTo'] = rs['destination']['track']['userName']

    #     return parsedRS

    def geto2oWorkEvents(self):

        return self.o2oWorkEvents


class o2oWorkEvents:
    """
    This class makes the o2o work event list for TrainPlayer.
    """

    def __init__(self, workEvents):

        self.tpRollingStockData = ModelEntities.getTpRailroadJson('tpRollingStockData')

        self.workEvents = workEvents
        self.o2oList = ''

        fileName = 'JMRI Report - o2o Workevents.csv'
        self.o2oWorkEventPath = PSE.OS_PATH.join(PSE.JMRI.util.FileUtil.getHomePath(), 'AppData', 'Roaming', 'TrainPlayer', 'Reports', fileName)

        return

    def o2oHeader(self):

        _psLog.debug('o2oWorkEvents.o2oHeader')

        self.o2oList = 'HN,' + PSE.getRailroadName().replace('\n', ';') + '\n'
        self.o2oList += 'HT,' + self.workEvents['trainName'] + '\n'
        self.o2oList += 'HD,' + self.workEvents['trainDescription'] + '\n'
        self.o2oList += 'HV,' + self.workEvents['date'] + '\n'
        self.o2oList += 'WT,' + str(len(self.workEvents['locations'])) + '\n'

        return

    def o2oLocations(self):
        """
        This works for both JMRI and o2o generated lists.
        """

        _psLog.debug('o2oWorkEvents.o2oLocations')

        counter = 1

        for location in self.workEvents['locations']:
            self.o2oList += u'WE,' + str(counter) + ',' + location['locationName'] + '\n'
            for track in location['tracks']:
                for car in track['cars']:
                    self.o2oList += self.makeLine(car) + '\n'
                for loco in track['locos']:
                    self.o2oList += self.makeLine(loco) + '\n'

            counter += 1

        return

    def makeLine(self, rs):
        """
        This makes a rolling stock line for the TP o2o file.
        format: PUSO, TP ID, Road, Number, Car Type, L/E/O, Load or Model, From, To
        """

        ID = rs['road'] + ' ' + rs['number']
        load = ''
        try:
            load = rs['load']
        except:
            load = rs['model']

        try: # Locos don't use load type
            lt = rs['loadType']
        except:
            lt = u'X'

        pu = rs['location'] + ';' + rs['track']

        so = rs['destination'] + ';' + rs['setTo']

        return rs['puso'] + ',' + ID + ',' + rs['road'] + ',' + rs['number'] + ',' + rs['carType'] + ',' + lt + ',' + load + ',' + pu + ',' + so

    def saveList(self):

        _psLog.debug('o2oWorkEvents.saveList')

        if ModelEntities.tpDirectoryExists():
            PSE.genericWriteReport(self.o2oWorkEventPath, self.o2oList)

        print(SCRIPT_NAME + '.o2oWorkEvents ' + str(SCRIPT_REV))

        return
